# name of executable

PROJECT ?= $(notdir $(CURDIR))
ELF=$(PROJECT).elf

# Tool path

TOOLROOT=/cortex/gcc-arm-none-eabi-4_6-2012q4/bin

# Library path

LIBROOT=$(TEMPLATEROOT)/stm32lib

# Tools

CC=$(TOOLROOT)/arm-none-eabi-gcc
LD=$(TOOLROOT)/arm-none-eabi-gcc
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as

# Code Paths

CORE=$(LIBROOT)/Libraries/CMSIS
DEVICE=$(CORE)/Device/ST/STM32L1xx
PERIPH=$(LIBROOT)/Libraries/STM32L1xx_StdPeriph_Driver
BOARD=$(TEMPLATEROOT)/stm32l-discovery

# Search path for standard files

vpath %.c $(TEMPLATEROOT)

# Search path for perpheral library

vpath %.c $(CORE)
vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)

# Search path for Library

#vpath %.c $(TEMPLATEROOT)/Library/ff9/src
#vpath %.c $(TEMPLATEROOT)/Library/ff9/src/option
#vpath %.c $(TEMPLATEROOT)/Library
vpath % $(BOARD)

#  Processor specific

PTYPE = STM32L1XX_MDP
LDSCRIPT = $(TEMPLATEROOT)/stm32l-discovery/stm32l152rb.lsf
STARTUP= startup_stm32l1xx_md.o system_stm32l1xx.o

# Compilation Flags

FULLASSERT = -DUSE_FULL_ASSERT

CFLAGS += -gdwarf-2
CFLAGS += -Wall
CFLAGS += -c
CFLAGS += -fmessage-length=0
CFLAGS += -fno-builtin
CFLAGS += -ffunction-sections
CFLAGS += -fdata-sections
CFLAGS += -msoft-float
CFLAGS += -mapcs-frame
CFLAGS += -D__thumb2__=1
CFLAGS += -mno-sched-prolog
CFLAGS += -fno-hosted
CFLAGS += -mtune=cortex-m3
CFLAGS += -mcpu=cortex-m3
CFLAGS += -mthumb
CFLAGS += -mfix-cortex-m3-ldrd
CFLAGS += -fno-strict-aliasing
CFLAGS += -ffast-math
CFLAGS+= -I. -I$(DEVICE)/Include -I$(CORE)/Include -I$(PERIPH)/inc -I$(BOARD)
CFLAGS+= -D$(PTYPE) -DUSE_STDPERIPH_DRIVER $(FULLASSERT)
#CFLAGS+= -I$(TEMPLATEROOT)/Library
#CFLAGS+=-I$(TEMPLATEROOT)/Library/ff9/src 

LDFLAGS += -T$(LDSCRIPT) -Xlinker -Map=$(PROJECT).map
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -mcpu=cortex-m3
LDFLAGS += -mthumb
LDFLAGS += -static   
LDFLAGS += -nostdlib

#LIB_LD = -lm

ASMFLAGS  = -D__ASSEMBLY__
ASMFLAGS += -g $(CFLAGS)
ASMFLAGS += -I. -x assembler-with-cpp

# Build executable

$(ELF) : $(OBJS)
	@echo Linking: $@
	@$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)

# compile and generate dependency info

%.o: %.c
	@echo Compiling: $<
	@$(CC) -c $(CFLAGS) $< -o $@
	@$(CC) -MM $(CFLAGS) $< > $*.d

%.o: %.s
	@echo Assembling: $<
	@$(CC) -c $(ASMFLAGS) $< -o $@

clean:
	rm -f $(OBJS) $(OBJS:.o=.d) $(ELF) $(CLEANOTHER)

# pull in dependencies

-include $(OBJS:.o=.d)
